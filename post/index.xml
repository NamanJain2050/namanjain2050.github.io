<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on naman&#39;s blog</title>
    <link>https://namanjain2050.github.io/post/</link>
    <description>Recent content in Posts on naman&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 31 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://namanjain2050.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>More on Inheritance &amp; Subtyping polymorphism</title>
      <link>https://namanjain2050.github.io/post/more-on-subtyping-inheitance/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://namanjain2050.github.io/post/more-on-subtyping-inheitance/</guid>
      <description>Let&#39; see some examples of various cases of Inheritance &amp;amp; polymorphism.
Example - 1 (Very basic) 1class A { 2 3 public void func() { 4 5 System.out.println(&amp;#34;Class A&amp;#39;s func&amp;#34;); 6 } 7 8 public void foo() { 9 10 System.out.println(&amp;#34;Class A&amp;#39;s foo&amp;#34;); 11 } 12} 1class Helper { 2 3 public static void main(String args[]) { 4 5 A a = new A(); 6 a.foo(); 7 a.func(); 8 } 9} Let&#39;s look at it visually: Output: 1Class A&amp;#39;s foo 2Class A&amp;#39;s func() Let&#39;s understand the output:</description>
    </item>
    
    <item>
      <title>The &#34;abstract&#34; keyword - Abstract classes &amp; Methods</title>
      <link>https://namanjain2050.github.io/post/abstract-keyword/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://namanjain2050.github.io/post/abstract-keyword/</guid>
      <description>Introduction Consider the following class design: We can notice that we are using inheritance in this class design to avoid code duplicity. We also notice that we are overriding some methods in TwoWheeler class &amp;amp; FourWheeler class; we also override some methods in Bicycle, Scooter, Hatchback, SUV, Sedan classes respectively. We can create an object of say class Sedan like the following: 1Sedan sedan = new Sedan(); We can also change the type of our reference variable to any of the superclass of Sedan, making use of Subtyping polymorphism (read more here).</description>
    </item>
    
    <item>
      <title>Method Overloading v/s Method Overriding</title>
      <link>https://namanjain2050.github.io/post/overloading-v-s-overriding/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://namanjain2050.github.io/post/overloading-v-s-overriding/</guid>
      <description>In this post we&#39;ll see the subtle differences between method overloading and method overriding. We&#39;ll also look at the rules for doing overloading and overriding.s
Method overloading In a class when we define multiple functions with same name but different argument list, it&#39;s called method overloading. For example: 1int add(int a, int b) { 2 int add(int a, int b) { 3 4 return a + b; 5} 6float add(float a, float b) { 7 8 return a + b; 9} 10double add(double a, int b) { 11 12 return a + b; 13} 14double add(int a, double b) { 15 16 return a + b; 17} Here we&#39;ve defined four functions with the name add.</description>
    </item>
    
    <item>
      <title>An Introduction to Polymorphism</title>
      <link>https://namanjain2050.github.io/post/intro-to-polymorphism/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://namanjain2050.github.io/post/intro-to-polymorphism/</guid>
      <description>Polymorphism (from Greek) means one shape many forms. In programming, it means to allow single symbol to perform different types of actions. It can also mean to provide single interface for entities of different types.
A basic example Consider the following two lines of code:
12 + 3; 2&amp;#34;hello&amp;#34; + &amp;#34;world&amp;#34;; First line will add the two operands and produce the sum as the result. The second line will concatenate the two operands and produce the concatenated string as the result.</description>
    </item>
    
    <item>
      <title>Can things be avoided from getting Inherited? - The &#39;final&#39; Keyword</title>
      <link>https://namanjain2050.github.io/post/limt-inheritance/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://namanjain2050.github.io/post/limt-inheritance/</guid>
      <description>&lt;p&gt;We&#39;ve seen multiple examples of how to inherit properties from parent class to the child classes using &lt;code&gt;extends&lt;/code&gt; keyword. We&#39;ve also seen examples of method overriding and why we need it. Now few questions come to mind: Is there a way to prevent classes from getting extended, is there a way to protect methods from getting overridden and why will someone ever need to do such a thing. Let&#39;s dive deep.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Reusability and Inheritance</title>
      <link>https://namanjain2050.github.io/post/code-reusability-and-inheritance/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://namanjain2050.github.io/post/code-reusability-and-inheritance/</guid>
      <description>&lt;p&gt;In this article we&#39;ll see a story that guides us towards inheritance. We&#39;ll look at different use cases and look at UML diagrams for those use cases to understand the proposed solutions. Let&#39;s dive deep&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Inheritance Syntax</title>
      <link>https://namanjain2050.github.io/post/intro-to-inheritance-syntax/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://namanjain2050.github.io/post/intro-to-inheritance-syntax/</guid>
      <description>&lt;p&gt;In this post we&#39;ll cover very basic syntax for inheritance in Java. We&#39;ll use examples mentioned &lt;a href=&#34;https://namanjain2050.github.io/post/code-reusability-and-inheritance&#34;&gt;here&lt;/a&gt;. We&#39;ll also look at different UML diagrams and try to convert those diagrams to actual classes using Java syntax.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Main Inheritance Concepts</title>
      <link>https://namanjain2050.github.io/post/main-inheritance-concepts/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://namanjain2050.github.io/post/main-inheritance-concepts/</guid>
      <description>&lt;p&gt;We saw why one might use inheritance &lt;a href=&#34;https://namanjain2050.github.io/post/code-reusability-and-inheritance&#34;&gt;here&lt;/a&gt;. In this post we&#39;ll build on that knowledge and see more concepts relating to inheritance.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
